<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Second Hand Dresses | DressVault</title>
    <meta name="title" content="Second Hand Dresses | DressVault">
    <meta name="description"
        content="Discover beautiful pre-owned dresses at affordable prices. Buy and sell second-hand designer and casual dresses.">

    <meta property="og:type" content="website">
    <meta property="og:title" content="Second Hand Dresses | DressVault">
    <meta property="og:description"
        content="Discover beautiful pre-owned dresses at affordable prices. Buy and sell second-hand designer and casual dresses.">
    <meta property="og:url" content="https://dressvault.com/shop-dress/">
    <meta property="og:image" content="https://dressvault.com/images/dress-social-preview.png">

    <link rel="icon" type="image/png" href="/images/favicon.png" sizes="32x32">
    <link rel="canonical" href="https://dressvault.com/shop-dress/">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>

</head>

<style>
    body {
        font-family: 'Montserrat', sans-serif;
    }

    [x-cloak] {
        display: none !important;
    }

    .modal-open {
        overflow-y: scroll;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
    }

    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes slideIn {
        from {
            opacity: 0;
            transform: scale(0.9);
        }

        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    .animate-fadeInUp {
        animation: fadeInUp 0.4s ease-out forwards;
    }

    .animate-slideIn {
        animation: slideIn 0.3s ease-out forwards;
    }

    /* Custom scrollbar for select */
    .custom-scroll::-webkit-scrollbar {
        width: 6px;
    }

    .custom-scroll::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }

    .custom-scroll::-webkit-scrollbar-thumb {
        background: #9ca3af;
        border-radius: 10px;
    }

    .custom-scroll::-webkit-scrollbar-thumb:hover {
        background: #6b7280;
    }

    /* Loading animation */
    .loading-dots {
        display: inline-flex;
        gap: 4px;
    }

    .loading-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #ec4899;
        animation: pulse 1.4s ease-in-out infinite both;
    }

    .loading-dot:nth-child(2) {
        animation-delay: 0.2s;
    }

    .loading-dot:nth-child(3) {
        animation-delay: 0.4s;
    }

    .loading-dot:nth-child(4) {
        animation-delay: 0.6s;
    }

    @keyframes pulse {

        0%,
        80%,
        100% {
            transform: scale(0.8);
            opacity: 0.5;
        }

        40% {
            transform: scale(1);
            opacity: 1;
        }
    }

    /* Image Slider Dots */
    .image-slider-container {
        position: relative;
        overflow: hidden;
    }

    .image-slider {
        display: flex;
        transition: transform 0.3s ease-in-out;
    }

    .slider-image {
        flex-shrink: 0;
        width: 100%;
        height: 300px;
        object-fit: cover;
    }

    .slider-dots {
        display: flex;
        justify-content: center;
        gap: 6px;
        height: 8px;
        z-index: 10;
        margin: 7px auto 0;
        width: fit-content;
    }

    .slider-dot {
        width: 4px;
        height: 4px;
        border-radius: 50%;
        background-color: rgba(8, 8, 8, 0.5);
        cursor: pointer;
        transition: all 0.2s ease;
        backdrop-filter: blur(4px);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .slider-dot.active {
        background-color: rgba(4, 4, 4, 0.9);
        transform: scale(1.2);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .slider-dot:hover {
        background-color: rgba(255, 255, 255, 0.8);
        transform: scale(1.1);
    }

    /* Navigation arrows */
    .slider-nav {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 32px;
        height: 32px;
        background: rgba(255, 255, 255, 0.9);
        border: none;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        z-index: 10;
        opacity: 0;
        transition: all 0.2s ease;
        backdrop-filter: blur(4px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .slider-nav:hover {
        background: rgba(255, 255, 255, 1);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .slider-nav.prev {
        left: 8px;
    }

    .slider-nav.next {
        right: 8px;
    }

    .image-slider-container:hover .slider-nav {
        opacity: 1;
    }

    /* Hide navigation and dots for single images */
    .single-image .slider-nav {
        display: none;
    }

    /* Filter backdrop for mobile */
    .filter-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 40;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
    }

    .filter-backdrop.active {
        opacity: 1;
        visibility: visible;
    }

    /* Filter pills */
    .filter-pill {
        display: flex;
        align-items: center;
        gap: 6px;
        background: #f3f4f6;
        border: 1px solid #d1d5db;
        border-radius: 16px;
        padding: 4px 12px;
    }

    .filter-pill .remove-filter {
        cursor: pointer;
        transition: color 0.2s ease;
    }

    .filter-pill .remove-filter:hover {
        color: #ef4444;
    }

    /* Dress condition badges */
    .condition-excellent {
        background: #10b981;
    }

    .condition-good {
        background: #f59e0b;
    }

    .condition-fair {
        background: #ef4444;
    }

    .condition-new {
        background: #8b5cf6;
    }

    /* Size badges */
    .size-badge {
        background: #ec4899;
        color: white;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
    }
</style>

<body class="bg-[#fdf7f7]/80">
    <!-- Navbar -->
    <header class="bg-white border-b border-gray-200">
        <nav x-data="{ isOpen: false }" class="max-w-[2000px] p-5 mx-auto lg:px-8 lg:py-5">
            <div class="flex justify-between items-center relative">
                <!-- Logo -->
                <a href="/">
                    <img class="w-auto h-5 sm:h-7" src="/images/logo-pink.png" alt="DressVault Logo">
                </a>

                <!-- Desktop Navigation -->
                <div class="hidden lg:flex absolute left-1/2 transform -translate-x-1/2 space-x-12">
                    <a href="/" class="text-gray-600 hover:text-pink-600 transition-colors duration-300">Home</a>
                    <a href="/shop-dress/" class="text-gray-600 hover:text-pink-600 transition-colors duration-300">Shop
                        Dress</a>
                    <a href="/sell-dress/" class="text-gray-600 hover:text-pink-600 transition-colors duration-300">Sell
                        Dress</a>
                    <a href="/about-us/" class="text-gray-600 hover:text-pink-600 transition-colors duration-300">About
                        us</a>
                    <a href="/contact/"
                        class="text-gray-600 hover:text-pink-600 transition-colors duration-300">Contact</a>
                </div>

                <!-- Login -->
                <div class="hidden lg:flex items-center">
                    <a class="block px-5 py-2 mt-4 text-sm text-center text-white capitalize bg-pink-600 rounded-lg lg:mt-0 hover:bg-pink-500 lg:w-auto"
                        href="/login/">
                        Log in
                    </a>
                </div>

                <!-- Mobile menu button -->
                <div class="flex lg:hidden">
                    <button x-cloak @click="isOpen = !isOpen" type="button"
                        class="text-gray-500 hover:text-gray-600 focus:outline-none focus:text-gray-600"
                        aria-label="toggle menu">
                        <svg x-show="!isOpen" xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none"
                            viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M4 8h16M4 16h16" />
                        </svg>
                        <svg x-show="isOpen" xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none"
                            viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
            </div>

            <!-- Mobile Menu -->
            <div x-cloak :class="[isOpen ? 'translate-x-0 opacity-100 ' : 'opacity-0 -translate-x-full']"
                class="lg:hidden absolute inset-x-0 transition-all duration-300 ease-in-out bg-white border-b border-gray-200 shadow-lg z-40">
                <div class="px-4 py-6 space-y-4">
                    <a href="/"
                        class="block text-gray-600 hover:text-pink-600 font-medium transition-colors duration-300">Home</a>
                    <a href="/shop-dress/"
                        class="block text-gray-600 hover:text-pink-600 font-medium transition-colors duration-300">Shop
                        Dress</a>
                    <a href="/sell-dress/"
                        class="block text-gray-600 hover:text-pink-600 font-medium transition-colors duration-300">Sell
                        Dress</a>
                    <a href="/about-us/"
                        class="block text-gray-600 hover:text-pink-600 font-medium transition-colors duration-300">About
                        us</a>
                    <a href="/contact/"
                        class="block text-gray-600 hover:text-pink-600 font-medium transition-colors duration-300">Contact</a>
                    <a class="block px-5 py-2 mt-4 text-sm text-center text-white capitalize bg-pink-600 rounded-lg lg:mt-0 hover:bg-pink-500 lg:w-auto"
                        href="/login/">
                        Log in
                    </a>
                </div>
            </div>
        </nav>
    </header>

    <!-- Filter backdrop for mobile -->
    <div id="filter-backdrop" class="filter-backdrop" onclick="closeFilterSidebar()"></div>

    <div class="max-w-[2000px] mx-auto flex flex-col md:flex-row md:min-h-screen relative">
        <!-- FilterSidebar -->
        <aside class="absolute top-0 left-0 z-50 h-full w-2/3 bg-white shadow-lg transform transition-transform duration-500
         -translate-x-full md:translate-x-0 md:static md:w-[300px] md:h-auto md:shadow-none md:border-r md:space-y-4"
            id="filterSidebar">
            <div class="filter-sidebar-scroll px-6 py-2">
                <div class="flex justify-end py-2 md:hidden">
                    <button id="closeFilterBtn" onclick="closeFilterSidebar()" class="text-gray-600 hover:text-black">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="flex justify-between items-center mb-2">
                    <h2 class="text-xl font-semibold">Filters</h2>
                    <button onclick="resetFilters()" class="text-sm text-pink-600 hover:underline font-medium">
                        Reset All
                    </button>
                </div>

                <!-- Price Range -->
                <div>
                    <button onclick="toggleSection('price')"
                        class="w-full flex justify-between items-center font-medium text-left py-2 px-1 border-b border-gray-200 hover:bg-gray-50">
                        Price
                        <span id="icon-price">+</span>
                    </button>
                    <div id="section-price" class="mt-5 hidden">
                        <input type="range" id="priceRange" min="10" max="500" step="5" class="w-full" value="500"
                            oninput="updatePriceLabel()">
                        <p class="text-sm text-gray-600 mt-1">Up to $<span id="priceLabel">500</span></p>
                    </div>
                </div>

                <!-- Sizes -->
                <div>
                    <button onclick="toggleSection('sizes')"
                        class="w-full flex justify-between items-center font-medium text-left py-2 px-1 border-b border-gray-200 hover:bg-gray-50">
                        Sizes
                        <span id="icon-sizes">+</span>
                    </button>
                    <div id="section-sizes" class="mt-5 space-y-1 hidden">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>

                <!-- Brands -->
                <div>
                    <button onclick="toggleSection('brands')"
                        class="w-full flex justify-between items-center font-medium text-left py-2 px-1 border-b border-gray-200 hover:bg-gray-50">
                        Brands
                        <span id="icon-brands">+</span>
                    </button>
                    <div id="section-brands" class="mt-5 space-y-1 hidden">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>

                <!-- Colors -->
                <div>
                    <button onclick="toggleSection('colors')"
                        class="w-full flex justify-between items-center font-medium text-left py-2 px-1 border-b border-gray-200 hover:bg-gray-50">
                        Colors
                        <span id="icon-colors">+</span>
                    </button>
                    <div id="section-colors" class="mt-5 space-y-1 hidden">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>

                <!-- Condition -->
                <div>
                    <button onclick="toggleSection('condition')"
                        class="w-full flex justify-between items-center font-medium text-left py-2 px-1 border-b border-gray-200 hover:bg-gray-50">
                        Condition
                        <span id="icon-condition">+</span>
                    </button>
                    <div id="section-condition" class="mt-5 space-y-1 hidden">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>

                <!-- Category -->
                <div>
                    <button onclick="toggleSection('category')"
                        class="w-full flex justify-between items-center font-medium text-left py-2 px-1 border-b border-gray-200 hover:bg-gray-50">
                        Category
                        <span id="icon-category">+</span>
                    </button>
                    <div id="section-category" class="mt-5 space-y-1 hidden">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>

                <!-- Apply Filters Button -->
                <div class="mt-6">
                    <button onclick="applyFilters()"
                        class="w-full bg-pink-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-pink-700 transition duration-200">
                        Apply Filters
                    </button>
                </div>
            </div>
        </aside>

        <main id="dresses-container" class="flex-1 p-5 min-h-screen">
            <!-- Header with Search -->
            <div class="mb-3">
                <div class="flex flex-col gap-4">
                    <!-- Title and Search Row -->
                    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                        <div>
                            <h1 class="text-xl font-bold text-gray-900">Dress Listings</h1>
                        </div>

                        <!-- Search Bar -->
                        <div class="relative w-full sm:w-96">
                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                <i class="fas fa-search text-gray-400"></i>
                            </div>
                            <input id="search-bar" type="text" placeholder="Search dresses..." onkeyup="filterDresses()"
                                oninput="updateSuggestions()" autocomplete="off"
                                class="w-full text-sm pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-transparent" />

                            <!-- Suggestions Dropdown -->
                            <ul id="dress-suggestions"
                                class="absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-y-auto custom-scroll hidden">
                            </ul>
                        </div>
                    </div>

                    <!-- Controls Row - Sort By and Filter Pills -->
                    <div class="flex items-center justify-between gap-4">
                        <!-- Sort By and Filter Pills -->
                        <div class="flex items-center gap-3">
                            <!-- Sort By Dropdown -->
                            <div class="relative" x-data="{ open: false }">
                                <button @click="open = !open" @click.away="open = false"
                                    class="flex items-center gap-2 px-4 py-2 text-xs font-medium text-gray-700 bg-white border border-gray-300 rounded-full hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-transparent transition-colors">
                                    <i class="fas fa-sort text-gray-500"></i>
                                    <span id="sort-label">Sort By</span>
                                    <i class="fas fa-chevron-down text-xs text-gray-500 transition-transform"
                                        :class="{ 'rotate-180': open }"></i>
                                </button>

                                <div x-show="open" x-transition:enter="transition ease-out duration-200"
                                    x-transition:enter-start="opacity-0 scale-95"
                                    x-transition:enter-end="opacity-100 scale-100"
                                    x-transition:leave="transition ease-in duration-150"
                                    x-transition:leave-start="opacity-100 scale-100"
                                    x-transition:leave-end="opacity-0 scale-95"
                                    class="absolute top-full left-0 mt-2 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-20">
                                    <div class="py-1">
                                        <button onclick="sortDresses('price-low')"
                                            class="w-full text-left px-4 py-2 text-xs text-gray-700 hover:bg-gray-50 transition-colors">
                                            Price: Low to High
                                        </button>
                                        <button onclick="sortDresses('price-high')"
                                            class="w-full text-left px-4 py-2 text-xs text-gray-700 hover:bg-gray-50 transition-colors">
                                            Price: High to Low
                                        </button>
                                        <button onclick="sortDresses('newest')"
                                            class="w-full text-left px-4 py-2 text-xs text-gray-700 hover:bg-gray-50 transition-colors">
                                            Newest First
                                        </button>
                                        <button onclick="sortDresses('oldest')"
                                            class="w-full text-left px-4 py-2 text-xs text-gray-700 hover:bg-gray-50 transition-colors">
                                            Oldest First
                                        </button>
                                        <button onclick="sortDresses('brand')"
                                            class="w-full text-left px-4 py-2 text-xs text-gray-700 hover:bg-gray-50 transition-colors">
                                            Brand (A-Z)
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <!-- Filter Toggle Button -->
                            <button id="filter-toggle" onclick="toggleFilterSidebar()"
                                class="flex items-center gap-2 px-4 py-2 text-xs font-medium text-gray-700 bg-white border border-gray-300 rounded-full hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-transparent transition-colors lg:hidden">
                                <i class="fas fa-filter text-gray-500"></i>
                                <span>Filter</span>
                            </button>

                            <!-- Active Filters Pills (Desktop) -->
                            <div id="active-filters" class="hidden lg:flex items-center gap-2">
                                <!-- Active filter pills will be populated here -->
                            </div>
                        </div>

                        <!-- Results Count -->
                        <div class="text-xs text-gray-600">
                            <span id="results-count">0</span> dresses found
                        </div>
                    </div>

                    <!-- Active Filters Pills (Mobile) -->
                    <div id="active-filters-mobile" class="flex lg:hidden flex-wrap items-center gap-2">
                        <!-- Active filter pills for mobile will be populated here -->
                    </div>
                </div>
            </div>

            <!-- Loading State -->
            <div id="loading-wrapper" class="flex justify-center items-center h-64">
                <div class="text-center">
                    <div class="loading-dots mb-4">
                        <div class="loading-dot"></div>
                        <div class="loading-dot"></div>
                        <div class="loading-dot"></div>
                        <div class="loading-dot"></div>
                    </div>
                    <p class="text-gray-600">Loading dress collection...</p>
                </div>
            </div>

            <!-- Dress Grid -->
            <div id="dress-cards-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Cards will be populated by JavaScript -->
            </div>

            <!-- No Results Message -->
            <div id="no-match-message" class="text-center py-12 hidden">
                <i class="fas fa-search text-gray-300 text-4xl mb-4"></i>
                <h3 class="text-lg font-medium text-gray-900 mb-2">No dresses found</h3>
                <p class="text-gray-600">Try adjusting your search criteria or check back later for new listings</p>
            </div>

            <div id="pagination-wrapper" class="my-5 flex justify-center">
                <div id="pagination" class="pagination-buttons flex flex-wrap gap-2"></div>
            </div>
        </main>
    </div>

    <!-- WhatsApp Chat Bubble -->
    <div id="whatsapp-chat"
        class="fixed bottom-5 right-5 bg-green-500 w-12 h-12 rounded-full shadow-lg flex items-center justify-center opacity-0 scale-90 transition-opacity transition-transform duration-400 z-40">
        <div id="whatsapp-bubble"
            class="absolute bottom-16 right-0 bg-white text-gray-800 px-3 py-1.5 rounded-lg text-xs shadow-md opacity-0 translate-y-2 transition-opacity transition-transform duration-300 whitespace-nowrap">
            Have questions about a dress?
        </div>
        <a href="https://wa.me/1234567890?text=I%20have%20a%20question%20about%20a%20dress%20listing" target="_blank"
            rel="noopener noreferrer"
            class="block w-10 h-10 flex justify-center items-center text-3xl text-white bg-green-500 rounded-full">
            <i class="fab fa-whatsapp"></i>
        </a>
        <button id="close-chat"
            class="absolute -top-2 -right-2 bg-red-600 text-white rounded-full w-5 h-5 text-xs flex items-center justify-center cursor-pointer hidden hover:bg-red-700 focus:outline-none"
            aria-label="Close chat">
            <i class="fas fa-times"></i>
        </button>
    </div>

    <!-- Footer -->
    <footer class="bg-white border-t">
        <div class="max-w-[2000px] p-6 mx-auto">
            <div class="lg:flex">
                <div class="w-full py-6 lg:w-2/5">
                    <a href="/">
                        <img class="w-auto h-5" src="/images/logo-pink.png" alt="DressVault Logo">
                    </a>
                    <p class="max-w-sm mt-2 text-gray-500">Your premier destination for pre-loved designer and casual
                        dresses.</p>
                    <div class="flex space-x-4 mt-4">
                        <a href="https://wa.me/1234567890" target="_blank" class="text-gray-700 text-2xl"
                            aria-label="Chat on WhatsApp">
                            <i class="fab fa-whatsapp"></i>
                        </a>
                        <a href="https://instagram.com/dressvault" target="_blank" class="text-gray-700 text-2xl"
                            aria-label="Visit Instagram">
                            <i class="fab fa-instagram"></i>
                        </a>
                        <a href="https://facebook.com/dressvault" target="_blank" class="text-gray-700 text-2xl"
                            aria-label="Visit Facebook">
                            <i class="fab fa-facebook"></i>
                        </a>
                    </div>
                </div>

                <div class="mt-0 lg:mt-0 lg:flex-1">
                    <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3">
                        <div>
                            <h3 class="text-gray-700 font-semibold">Shop</h3>
                            <a href="/shop-dress/" class="block mt-2 text-sm text-gray-500 hover:underline">Browse
                                Dresses</a>
                            <a href="/designer/" class="block mt-2 text-sm text-gray-500 hover:underline">Designer
                                Dresses</a>
                            <a href="/casual/" class="block mt-2 text-sm text-gray-500 hover:underline">Casual
                                Dresses</a>
                            <a href="/formal/" class="block mt-2 text-sm text-gray-500 hover:underline">Formal
                                Dresses</a>
                        </div>

                        <div>
                            <h3 class="text-gray-700 font-semibold">Sell</h3>
                            <a href="/sell-dress/" class="block mt-2 text-sm text-gray-500 hover:underline">Sell Your
                                Dress</a>
                            <a href="/pricing-guide/" class="block mt-2 text-sm text-gray-500 hover:underline">Pricing
                                Guide</a>
                            <a href="/condition-guide/"
                                class="block mt-2 text-sm text-gray-500 hover:underline">Condition Guide</a>
                        </div>

                        <div>
                            <h3 class="text-gray-700 font-semibold">Support</h3>
                            <a href="/#faq" class="block mt-2 text-sm text-gray-500 hover:underline">FAQ</a>
                            <a href="/contact/" class="block mt-2 text-sm text-gray-500 hover:underline">Contact Us</a>
                            <a href="/size-guide/" class="block mt-2 text-sm text-gray-500 hover:underline">Size
                                Guide</a>
                        </div>
                    </div>
                </div>
            </div>

            <hr class="h-px my-6 bg-gray-200 border-none">

            <div>
                <p class="text-center text-gray-500">&copy;
                    <script>
                        document.write(new Date().getFullYear())
                    </script> DressVault. All rights reserved.
                </p>
            </div>
        </div>
    </footer>

    <script src="https://www.gstatic.com/firebasejs/10.8.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore-compat.js"></script>
    <script>
        // ====== FIREBASE CONFIGURATION ======
        const firebaseConfig = {
            apiKey: "AIzaSyC25Tdl5GtnRXcHeBBGeIOuIcVX_WdiHP4",
            authDomain: "dresses-marketplace.firebaseapp.com",
            projectId: "dresses-marketplace",
            storageBucket: "dresses-marketplace.appspot.com",
            messagingSenderId: "597823500976",
            appId: "1:597823500976:web:71f23d89e38a5cdb010175"
        };
        firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();

        // ====== APPLICATION STATE ======
        const AppState = {
            dresses: [],
            filteredDresses: [],
            filters: {
                price: 500,
                sizes: [],
                brands: [],
                colors: [],
                condition: [],
                category: []
            },
            ui: {
                chatVisible: false,
                chatClosed: false
            }
        };

        // Filter data for dresses
        const FilterData = {
            sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL', '0', '2', '4', '6', '8', '10', '12', '14', '16', '18', '20'],
            brands: ['Zara', 'H&M', 'Forever 21', 'ASOS', 'Mango', 'Uniqlo', 'GAP', 'Banana Republic',
                'Ann Taylor', 'J.Crew', 'Kate Spade', 'Michael Kors', 'Coach', 'Diane von Furstenberg',
                'Calvin Klein', 'Tommy Hilfiger', 'Ralph Lauren', 'Hugo Boss', 'Armani', 'Gucci',
                'Prada', 'Versace', 'Dolce & Gabbana', 'Chanel', 'Dior', 'Saint Laurent'],
            colors: ['Black', 'White', 'Gray', 'Navy', 'Beige', 'Pink', 'Red', 'Blue', 'Green', 'Yellow',
                'Orange', 'Purple', 'Brown', 'Burgundy', 'Coral', 'Mint', 'Lavender', 'Gold', 'Silver'],
            conditions: ['New with Tags', 'Excellent', 'Good', 'Fair'],
            categories: ['Casual', 'Formal', 'Cocktail', 'Evening', 'Maxi', 'Mini', 'Midi', 'A-Line',
                'Bodycon', 'Wrap', 'Shift', 'Sweater', 'Sundress', 'Little Black Dress']
        };

        // ====== UTILITY FUNCTIONS ======
        const Utils = {
            formatCurrency: (amount) => new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD'
            }).format(amount),

            getElement: (id) => document.getElementById(id),

            toggleElement: (element, show) => {
                element.classList.toggle('hidden', !show);
            },

            escapeJSON: (obj) => JSON.stringify(obj).replace(/"/g, '&quot;')
        };

        // ====== TOAST NOTIFICATION SYSTEM ======
        const Toast = {
            show: (message, type = 'info') => {
                const container = Utils.getElement('toast-container');
                if (!container) return;

                const toast = document.createElement('div');
                const config = {
                    success: { bg: 'bg-green-500', icon: 'fas fa-check-circle' },
                    error: { bg: 'bg-red-500', icon: 'fas fa-exclamation-circle' },
                    warning: { bg: 'bg-yellow-500', icon: 'fas fa-exclamation-triangle' },
                    info: { bg: 'bg-pink-500', icon: 'fas fa-info-circle' }
                };

                const { bg, icon } = config[type] || config.info;

                toast.className = `${bg} text-white px-4 py-3 rounded-lg shadow-lg flex items-center transform translate-x-full transition-transform duration-300`;
                toast.innerHTML = `
          <i class="${icon} mr-2"></i>
          <span class="flex-1">${message}</span>
          <button onclick="this.parentElement.remove()" class="ml-2 text-white hover:text-gray-200">
            <i class="fas fa-times"></i>
          </button>
        `;

                container.appendChild(toast);
                setTimeout(() => toast.classList.remove('translate-x-full'), 10);
                setTimeout(() => {
                    if (toast.parentElement) {
                        toast.classList.add('translate-x-full');
                        setTimeout(() => toast.remove(), 300);
                    }
                }, 5000);
            }
        };

        // ====== DRESS DATA MANAGEMENT ======
        const DressManager = {
            async loadDresses() {
                const container = Utils.getElement("dress-cards-container");
                const loading = Utils.getElement("loading-wrapper");
                const noResults = Utils.getElement("no-match-message");

                try {
                    Utils.toggleElement(loading, true);
                    container.innerHTML = "";
                    Utils.toggleElement(noResults, false);

                    const querySnapshot = await db.collection("dresses").orderBy("timestamp", "desc").get();
                    Utils.toggleElement(loading, false);

                    if (querySnapshot.empty) {
                        Utils.toggleElement(noResults, true);
                        updateResultsCount(0);
                        return;
                    }

                    AppState.dresses = [];
                    querySnapshot.forEach(doc => {
                        const dress = { id: doc.id, ...doc.data() };
                        AppState.dresses.push(dress);
                    });

                    this.displayDresses(AppState.dresses);
                    updateResultsCount(AppState.dresses.length);

                } catch (error) {
                    console.error("Error loading dresses:", error);
                    Utils.toggleElement(loading, false);
                    this.loadSampleData(); // Load sample data if Firebase fails
                }
            },

            loadSampleData() {
                // Sample dress data for demonstration
                AppState.dresses = [
                    {
                        id: '1',
                        name: 'Floral Summer Dress',
                        brand: 'Zara',
                        price: 45,
                        originalPrice: 89,
                        size: 'M',
                        color: 'Pink',
                        condition: 'Excellent',
                        category: 'Casual',
                        description: 'Beautiful floral print summer dress, perfect for casual outings.',
                        images: ['/images/dress1-1.jpg', '/images/dress1-2.jpg'],
                        seller: 'Sarah M.',
                        location: 'New York, NY',
                        timestamp: new Date()
                    },
                    {
                        id: '2',
                        name: 'Little Black Dress',
                        brand: 'Calvin Klein',
                        price: 75,
                        originalPrice: 150,
                        size: 'S',
                        color: 'Black',
                        condition: 'Good',
                        category: 'Little Black Dress',
                        description: 'Classic little black dress, perfect for cocktail parties.',
                        images: ['/images/dress2-1.jpg'],
                        seller: 'Emma K.',
                        location: 'Los Angeles, CA',
                        timestamp: new Date()
                    },
                    {
                        id: '3',
                        name: 'Elegant Evening Gown',
                        brand: 'Michael Kors',
                        price: 120,
                        originalPrice: 280,
                        size: 'L',
                        color: 'Navy',
                        condition: 'New with Tags',
                        category: 'Evening',
                        description: 'Stunning evening gown, never worn with original tags.',
                        images: ['/images/dress3-1.jpg', '/images/dress3-2.jpg', '/images/dress3-3.jpg'],
                        seller: 'Jessica R.',
                        location: 'Chicago, IL',
                        timestamp: new Date()
                    }
                ];

                this.displayDresses(AppState.dresses);
                updateResultsCount(AppState.dresses.length);
            },

            displayDresses(dresses) {
                const container = Utils.getElement("dress-cards-container");
                container.innerHTML = "";

                dresses.forEach(dress => {
                    const dressCard = this.createDressCard(dress);
                    container.appendChild(dressCard);
                });

                setTimeout(() => this.initializeAllSliders(), 100);
            },

            createDressCard(dress) {
                const card = document.createElement("div");
                card.className = "bg-white rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200 overflow-hidden animate-fadeInUp";

                const images = dress.images?.length > 0 ? dress.images : ['/images/placeholder-dress.jpg'];
                const price = Utils.formatCurrency(dress.price || 0);
                const originalPrice = dress.originalPrice ? Utils.formatCurrency(dress.originalPrice) : null;
                const savings = dress.originalPrice ? Math.round(((dress.originalPrice - dress.price) / dress.originalPrice) * 100) : 0;

                const imageSliderHTML = images.map(img =>
                    `<img loading="lazy" src="${img}" alt="Dress Image" class="slider-image rounded-lg object-cover">`
                ).join('');

                const dotsHTML = images.length > 1
                    ? images.map((_, index) =>
                        `<div class="slider-dot ${index === 0 ? 'active' : ''}" onclick="ImageSlider.goToSlide(this, ${index})"></div>`
                    ).join('')
                    : '';

                const conditionClass = {
                    'New with Tags': 'condition-new',
                    'Excellent': 'condition-excellent',
                    'Good': 'condition-good',
                    'Fair': 'condition-fair'
                }[dress.condition] || 'condition-good';

                card.innerHTML = `
          <div class="bg-white rounded-xl shadow-md p-4 text-center transform transition-transform duration-300 relative">
            <!-- Image container -->
            <div class="relative w-full rounded-lg overflow-hidden image-slider-container ${images.length === 1 ? 'single-image' : ''}">
              ${savings > 0 ? `
                <div class="absolute top-2 left-2 bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full z-20">
                  ${savings}% OFF
                </div>
              ` : ''}

              <!-- Condition badge -->
              <div class="absolute top-2 right-2 ${conditionClass} text-white text-xs font-medium px-2 py-1 rounded-full z-20">
                ${dress.condition}
              </div>

              <!-- Image slider -->
              <div class="image-slider" data-current="0">
                ${imageSliderHTML}
              </div>

              <!-- Navigation arrows -->
              <button class="hidden sm:flex slider-nav prev" onclick="ImageSlider.slide(this, -1)">
                <i class="fas fa-chevron-left text-gray-700 text-sm"></i>
              </button>
              <button class="hidden sm:flex slider-nav next" onclick="ImageSlider.slide(this, 1)">
                <i class="fas fa-chevron-right text-gray-700 text-sm"></i>
              </button>
              
              <!-- Dot indicators -->
              <div class="slider-dots">${dotsHTML}</div>
            </div>

            <!-- Dress Info -->
            <div class="text-left mt-3">
              <div class="flex items-center justify-between mb-1">
                <h3 class="font-semibold text-lg text-gray-800 truncate">${dress.name}</h3>
                <span class="size-badge">${dress.size}</span>
              </div>
              
              <p class="text-sm text-gray-600 mb-2">${dress.brand} • ${dress.color}</p>
              
              <!-- Price -->
              <div class="flex items-center gap-2 mb-2">
                <span class="text-2xl font-bold text-gray-800">${price}</span>
                ${originalPrice ? `
                  <span class="text-sm text-gray-500 line-through">${originalPrice}</span>
                ` : ''}
              </div>

              <!-- Category -->
              <p class="text-xs text-gray-500 mb-3">${dress.category}</p>

              <!-- Seller info -->
              <div class="flex items-center justify-between text-xs text-gray-500 mb-3">
                <span><i class="fas fa-user mr-1"></i>${dress.seller}</span>
                <span><i class="fas fa-map-marker-alt mr-1"></i>${dress.location}</span>
              </div>

              <!-- Action buttons -->
              <div class="flex gap-2">
                <button onclick='viewDressDetails(${Utils.escapeJSON(dress)})' 
                        class="flex-1 bg-gray-100 text-gray-800 text-sm font-medium py-2 px-4 rounded-lg hover:bg-gray-200 transition-colors">
                  View Details
                </button>
                <button onclick='contactSeller("${dress.name}", "${dress.seller}")' 
                        class="flex-1 bg-pink-600 text-white text-sm font-medium py-2 px-4 rounded-lg hover:bg-pink-700 transition-colors">
                  Contact Seller
                </button>
              </div>
            </div>
          </div>
        `;

                return card;
            },

            initializeAllSliders() {
                document.querySelectorAll('.image-slider-container').forEach(container => {
                    ImageSlider.initialize(container);
                });
            }
        };

        // ====== IMAGE SLIDER FUNCTIONALITY ======
        const ImageSlider = {
            slide(button, direction) {
                const container = button.closest('.image-slider-container');
                const slider = container.querySelector('.image-slider');
                const images = slider.querySelectorAll('.slider-image');
                const dots = container.querySelectorAll('.slider-dot');

                let currentIndex = parseInt(slider.dataset.current) || 0;
                const totalImages = images.length;

                currentIndex = (currentIndex + direction + totalImages) % totalImages;

                slider.style.transform = `translateX(-${currentIndex * 100}%)`;
                slider.dataset.current = currentIndex;

                this.updateDots(dots, currentIndex);
            },

            goToSlide(dot, index) {
                const container = dot.closest('.image-slider-container');
                const slider = container.querySelector('.image-slider');
                const dots = container.querySelectorAll('.slider-dot');

                slider.style.transform = `translateX(-${index * 100}%)`;
                slider.dataset.current = index;

                this.updateDots(dots, index);
            },

            updateDots(dots, activeIndex) {
                dots.forEach((dot, index) => {
                    dot.classList.toggle('active', index === activeIndex);
                });
            },

            initialize(container) {
                const slider = container.querySelector('.image-slider');
                const images = slider.querySelectorAll('.slider-image');

                if (images.length <= 1) {
                    container.classList.add('single-image');
                    return;
                }

                this.setupTouchEvents(slider, container);
                this.setupMouseEvents(slider, container);
            },

            setupTouchEvents(slider, container) {
                let startX = 0;
                let currentX = 0;
                let isDragging = false;

                slider.addEventListener('touchstart', (e) => {
                    startX = e.touches[0].clientX;
                    isDragging = true;
                    slider.style.transition = 'none';
                });

                slider.addEventListener('touchmove', (e) => {
                    if (!isDragging) return;

                    currentX = e.touches[0].clientX;
                    const diff = currentX - startX;
                    const currentIndex = parseInt(slider.dataset.current) || 0;
                    const translateX = -currentIndex * 100 + (diff / container.offsetWidth * 100);

                    slider.style.transform = `translateX(${translateX}%)`;
                });

                slider.addEventListener('touchend', () => {
                    if (!isDragging) return;

                    isDragging = false;
                    slider.style.transition = 'transform 0.3s ease-in-out';

                    const diff = currentX - startX;
                    const threshold = container.offsetWidth * 0.2;

                    if (Math.abs(diff) > threshold) {
                        const direction = diff > 0 ? -1 : 1;
                        const navButton = container.querySelector('.slider-nav.next');
                        this.slide(navButton, direction);
                    } else {
                        const currentIndex = parseInt(slider.dataset.current) || 0;
                        slider.style.transform = `translateX(-${currentIndex * 100}%)`;
                    }
                });
            },

            setupMouseEvents(slider, container) {
                let startX = 0;
                let currentX = 0;
                let isMouseDown = false;

                const handleMouseDown = (e) => {
                    startX = e.clientX;
                    isMouseDown = true;
                    slider.style.transition = 'none';
                    slider.style.cursor = 'grabbing';
                };

                const handleMouseMove = (e) => {
                    if (!isMouseDown) return;

                    currentX = e.clientX;
                    const diff = currentX - startX;
                    const currentIndex = parseInt(slider.dataset.current) || 0;
                    const translateX = -currentIndex * 100 + (diff / container.offsetWidth * 100);

                    slider.style.transform = `translateX(${translateX}%)`;
                };

                const handleMouseEnd = () => {
                    if (!isMouseDown) return;

                    isMouseDown = false;
                    slider.style.transition = 'transform 0.3s ease-in-out';
                    slider.style.cursor = 'grab';

                    const diff = currentX - startX;
                    const threshold = container.offsetWidth * 0.2;

                    if (Math.abs(diff) > threshold) {
                        const direction = diff > 0 ? -1 : 1;
                        const navButton = container.querySelector('.slider-nav.next');
                        this.slide(navButton, direction);
                    } else {
                        const currentIndex = parseInt(slider.dataset.current) || 0;
                        slider.style.transform = `translateX(-${currentIndex * 100}%)`;
                    }
                };

                slider.addEventListener('mousedown', handleMouseDown);
                slider.addEventListener('mousemove', handleMouseMove);
                slider.addEventListener('mouseup', handleMouseEnd);
                slider.addEventListener('mouseleave', handleMouseEnd);
            }
        };

        // ====== SEARCH AND FILTER FUNCTIONALITY ======
        const SearchFilter = {
            filterDresses() {
                const searchTerm = Utils.getElement("search-bar").value.toLowerCase();
                const cards = document.querySelectorAll("#dress-cards-container > div");
                const noResults = Utils.getElement("no-match-message");
                let visibleCount = 0;

                cards.forEach(card => {
                    const text = card.textContent.toLowerCase();
                    const isVisible = text.includes(searchTerm);
                    card.style.display = isVisible ? "block" : "none";
                    if (isVisible) visibleCount++;
                });

                Utils.toggleElement(noResults, visibleCount === 0 && searchTerm !== "");
                updateResultsCount(visibleCount);
            },

            applyFilters() {
                AppState.filters.sizes = this.getCheckedValues('sizes');
                AppState.filters.brands = this.getCheckedValues('brands');
                AppState.filters.colors = this.getCheckedValues('colors');
                AppState.filters.condition = this.getCheckedValues('condition');
                AppState.filters.category = this.getCheckedValues('category');
                AppState.filters.price = parseInt(Utils.getElement('priceRange').value);

                const filtered = AppState.dresses.filter(dress => {
                    const matchesPrice = !dress.price || dress.price <= AppState.filters.price;
                    const matchesSize = AppState.filters.sizes.length === 0 || AppState.filters.sizes.includes(dress.size);
                    const matchesBrand = AppState.filters.brands.length === 0 || AppState.filters.brands.includes(dress.brand);
                    const matchesColor = AppState.filters.colors.length === 0 || AppState.filters.colors.includes(dress.color);
                    const matchesCondition = AppState.filters.condition.length === 0 || AppState.filters.condition.includes(dress.condition);
                    const matchesCategory = AppState.filters.category.length === 0 || AppState.filters.category.includes(dress.category);

                    return matchesPrice && matchesSize && matchesBrand && matchesColor && matchesCondition && matchesCategory;
                });

                if (filtered.length === 0) {
                    Utils.toggleElement(Utils.getElement("no-match-message"), true);
                    Utils.getElement("dress-cards-container").innerHTML = "";
                    updateResultsCount(0);
                } else {
                    Utils.toggleElement(Utils.getElement("no-match-message"), false);
                    DressManager.displayDresses(filtered);
                    updateResultsCount(filtered.length);
                }

                updateActiveFilters();

                if (window.innerWidth < 1024) {
                    closeFilterSidebar();
                }
            },

            resetFilters() {
                AppState.filters = {
                    price: 500,
                    sizes: [],
                    brands: [],
                    colors: [],
                    condition: [],
                    category: []
                };

                Utils.getElement('priceRange').value = 500;
                this.updatePriceLabel();
                document.querySelectorAll('input[type=checkbox]').forEach(cb => cb.checked = false);

                DressManager.displayDresses(AppState.dresses);
                Utils.toggleElement(Utils.getElement("no-match-message"), false);
                updateResultsCount(AppState.dresses.length);

                updateActiveFilters();
            },

            getCheckedValues(type) {
                const section = Utils.getElement(`section-${type}`);
                const uncheckAll = section.querySelector('.uncheck-all');

                if (uncheckAll?.checked) return [];

                return Array.from(section.querySelectorAll('input.option:checked')).map(cb => cb.value);
            },

            updatePriceLabel() {
                const value = Utils.getElement('priceRange').value;
                AppState.filters.price = parseInt(value);
                Utils.getElement('priceLabel').textContent = value;
            }
        };

        // ====== FILTER UI MANAGEMENT ======
        const FilterUI = {
            toggleSection(id) {
                const section = Utils.getElement(`section-${id}`);
                const icon = Utils.getElement(`icon-${id}`);

                section.classList.toggle('hidden');
                icon.textContent = section.classList.contains('hidden') ? '+' : '−';
            },

            populateCheckboxes(list, containerId) {
                const container = Utils.getElement(containerId);
                container.innerHTML = '';

                const uncheckWrapper = document.createElement('div');
                uncheckWrapper.className = 'flex items-center space-x-2 mb-1';
                uncheckWrapper.innerHTML = `
          <input type="checkbox" class="uncheck-all" id="uncheck-${containerId}" />
          <label class="text-sm font-semibold text-gray-700">Uncheck All</label>
        `;
                container.appendChild(uncheckWrapper);

                uncheckWrapper.querySelector('input').addEventListener('change', function () {
                    container.querySelectorAll('input.option').forEach(cb => cb.checked = false);
                });

                list.forEach(item => {
                    const wrapper = document.createElement('div');
                    wrapper.className = 'flex items-center space-x-2';
                    wrapper.innerHTML = `
            <input type="checkbox" value="${item}" class="option" />
            <label class="text-sm text-gray-700">${item}</label>
          `;
                    container.appendChild(wrapper);
                });

                container.addEventListener('change', e => {
                    if (e.target.classList.contains('option') && e.target.checked) {
                        const uncheckAll = container.querySelector('.uncheck-all');
                        if (uncheckAll) uncheckAll.checked = false;
                    }
                });
            },

            initialize() {
                this.populateCheckboxes(FilterData.sizes, 'section-sizes');
                this.populateCheckboxes(FilterData.brands, 'section-brands');
                this.populateCheckboxes(FilterData.colors, 'section-colors');
                this.populateCheckboxes(FilterData.conditions, 'section-condition');
                this.populateCheckboxes(FilterData.categories, 'section-category');
                SearchFilter.updatePriceLabel();
            }
        };

        // ====== WHATSAPP CHAT FUNCTIONALITY ======
        const WhatsAppChat = {
            initialize() {
                const chat = Utils.getElement('whatsapp-chat');
                const bubble = Utils.getElement('whatsapp-bubble');
                const closeBtn = Utils.getElement('close-chat');
                const dressesContainer = Utils.getElement('dresses-container');

                setTimeout(() => {
                    if (!AppState.ui.chatClosed) {
                        this.showChat(chat, bubble, closeBtn);
                        AppState.ui.chatVisible = true;
                    }
                }, 5000);

                window.addEventListener('scroll', () => {
                    if (!AppState.ui.chatVisible || AppState.ui.chatClosed) return;

                    const dressesBottom = dressesContainer.offsetTop + dressesContainer.offsetHeight;
                    const scrollY = window.scrollY + window.innerHeight;

                    if (scrollY > dressesBottom + 50) {
                        this.hideChat(chat, bubble);
                    } else {
                        this.showChat(chat, bubble, closeBtn);
                    }
                });

                closeBtn.addEventListener('click', () => {
                    this.hideChat(chat, bubble);
                    closeBtn.classList.add('hidden');
                    AppState.ui.chatClosed = true;
                });
            },

            showChat(chat, bubble, closeBtn) {
                chat.classList.remove('opacity-0', 'scale-90');
                chat.classList.add('opacity-100', 'scale-100');
                bubble.classList.remove('opacity-0', 'translate-y-2');
                bubble.classList.add('opacity-100', 'translate-y-0');
                closeBtn.classList.remove('hidden');
            },

            hideChat(chat, bubble) {
                chat.classList.add('opacity-0', 'scale-90');
                chat.classList.remove('opacity-100', 'scale-100');
                bubble.classList.add('opacity-0', 'translate-y-2');
                bubble.classList.remove('opacity-100', 'translate-y-0');
            }
        };

        // ====== ADDITIONAL FUNCTIONALITY ======
        let currentSort = 'newest';

        function sortDresses(sortType) {
            currentSort = sortType;

            const sortLabel = document.getElementById('sort-label');
            const labels = {
                'price-low': 'Price: Low to High',
                'price-high': 'Price: High to Low',
                'newest': 'Newest First',
                'oldest': 'Oldest First',
                'brand': 'Brand (A-Z)'
            };
            sortLabel.textContent = labels[sortType] || 'Sort By';

            let sortedDresses = [...AppState.dresses];

            switch (sortType) {
                case 'price-low':
                    sortedDresses.sort((a, b) => (a.price || 0) - (b.price || 0));
                    break;
                case 'price-high':
                    sortedDresses.sort((a, b) => (b.price || 0) - (a.price || 0));
                    break;
                case 'newest':
                    sortedDresses.sort((a, b) => new Date(b.timestamp || 0) - new Date(a.timestamp || 0));
                    break;
                case 'oldest':
                    sortedDresses.sort((a, b) => new Date(a.timestamp || 0) - new Date(b.timestamp || 0));
                    break;
                case 'brand':
                    sortedDresses.sort((a, b) => (a.brand || '').localeCompare(b.brand || ''));
                    break;
            }

            DressManager.displayDresses(sortedDresses);
            updateResultsCount(sortedDresses.length);
        }

        function toggleFilterSidebar() {
            const sidebar = document.getElementById('filterSidebar');
            const backdrop = document.getElementById('filter-backdrop');
            const isHidden = sidebar.classList.contains('-translate-x-full');

            if (isHidden) {
                sidebar.classList.remove('-translate-x-full');
                sidebar.classList.add('translate-x-0');
                backdrop.classList.add('active');
                document.body.classList.add('modal-open');
            } else {
                closeFilterSidebar();
            }
        }

        function closeFilterSidebar() {
            const sidebar = document.getElementById('filterSidebar');
            const backdrop = document.getElementById('filter-backdrop');

            sidebar.classList.add('-translate-x-full');
            sidebar.classList.remove('translate-x-0');
            backdrop.classList.remove('active');
            document.body.classList.remove('modal-open');
        }

        function updateResultsCount(count) {
            const resultsCount = document.getElementById('results-count');
            if (resultsCount) {
                resultsCount.textContent = count || 0;
            }
        }

        function updateActiveFilters() {
            const activeFiltersDesktop = document.getElementById('active-filters');
            const activeFiltersMobile = document.getElementById('active-filters-mobile');

            let filtersHTML = '';

            if (AppState.filters.price < 500) {
                filtersHTML += `
          <div class="filter-pill text-xs">
            <span>Up to ${AppState.filters.price}</span>
            <i class="fas fa-times text-xs remove-filter" onclick="removeFilter('price')"></i>
          </div>
        `;
            }

            ['sizes', 'brands', 'colors', 'condition', 'category'].forEach(filterType => {
                AppState.filters[filterType].forEach(value => {
                    filtersHTML += `
            <div class="filter-pill text-xs">
              <span>${value}</span>
              <i class="fas fa-times text-xs remove-filter" onclick="removeFilter('${filterType}', '${value}')"></i>
            </div>
          `;
                });
            });

            if (filtersHTML) {
                filtersHTML += `
          <button onclick="clearAllFilters()" class="text-xs text-pink-600 hover:text-pink-800 font-medium ml-2">
            Clear All
          </button>
        `;
            }

            activeFiltersDesktop.innerHTML = filtersHTML;
            activeFiltersMobile.innerHTML = filtersHTML;
        }

        function removeFilter(type, value) {
            switch (type) {
                case 'price':
                    AppState.filters.price = 500;
                    document.getElementById('priceRange').value = 500;
                    updatePriceLabel();
                    break;
                case 'sizes':
                    AppState.filters.sizes = AppState.filters.sizes.filter(s => s !== value);
                    const sizeCheckbox = document.querySelector(`#section-sizes input[value="${value}"]`);
                    if (sizeCheckbox) sizeCheckbox.checked = false;
                    break;
                case 'brands':
                    AppState.filters.brands = AppState.filters.brands.filter(b => b !== value);
                    const brandCheckbox = document.querySelector(`#section-brands input[value="${value}"]`);
                    if (brandCheckbox) brandCheckbox.checked = false;
                    break;
                case 'colors':
                    AppState.filters.colors = AppState.filters.colors.filter(c => c !== value);
                    const colorCheckbox = document.querySelector(`#section-colors input[value="${value}"]`);
                    if (colorCheckbox) colorCheckbox.checked = false;
                    break;
                case 'condition':
                    AppState.filters.condition = AppState.filters.condition.filter(c => c !== value);
                    const conditionCheckbox = document.querySelector(`#section-condition input[value="${value}"]`);
                    if (conditionCheckbox) conditionCheckbox.checked = false;
                    break;
                case 'category':
                    AppState.filters.category = AppState.filters.category.filter(c => c !== value);
                    const categoryCheckbox = document.querySelector(`#section-category input[value="${value}"]`);
                    if (categoryCheckbox) categoryCheckbox.checked = false;
                    break;
            }

            SearchFilter.applyFilters();
        }

        function clearAllFilters() {
            SearchFilter.resetFilters();
        }

        function viewDressDetails(dress) {
            // Create and show dress details modal
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4';
            modal.innerHTML = `
        <div class="bg-white rounded-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
          <div class="p-6">
            <div class="flex justify-between items-start mb-4">
              <h2 class="text-2xl font-bold text-gray-800">${dress.name}</h2>
              <button onclick="this.closest('.fixed').remove()" class="text-gray-500 hover:text-gray-700">
                <i class="fas fa-times text-xl"></i>
              </button>
            </div>
            <div class="grid md:grid-cols-2 gap-6">
              <div>
                <img src="${dress.images?.[0] || '/images/placeholder-dress.jpg'}" alt="${dress.name}" class="w-full h-64 object-cover rounded-lg">
              </div>
              
              <div>
                <div class="space-y-3">
                  <div class="flex justify-between">
                    <span class="font-medium">Brand:</span>
                    <span>${dress.brand}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="font-medium">Size:</span>
                    <span class="size-badge">${dress.size}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="font-medium">Color:</span>
                    <span>${dress.color}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="font-medium">Condition:</span>
                    <span>${dress.condition}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="font-medium">Category:</span>
                    <span>${dress.category}</span>
                  </div>
                  <div class="flex justify-between items-center">
                    <span class="font-medium">Price:</span>
                    <div class="flex items-center gap-2">
                      <span class="text-xl font-bold text-pink-600">${Utils.formatCurrency(dress.price)}</span>
                      ${dress.originalPrice ? `<span class="text-sm text-gray-500 line-through">${Utils.formatCurrency(dress.originalPrice)}</span>` : ''}
                    </div>
                  </div>
                </div>
                
                ${dress.description ? `
                  <div class="mt-4">
                    <h3 class="font-medium mb-2">Description</h3>
                    <p class="text-gray-600 text-sm">${dress.description}</p>
                  </div>
                ` : ''}
                
                <div class="mt-4 pt-4 border-t">
                  <div class="flex justify-between text-sm text-gray-600 mb-3">
                    <span><i class="fas fa-user mr-1"></i>Seller: ${dress.seller}</span>
                    <span><i class="fas fa-map-marker-alt mr-1"></i>${dress.location}</span>
                  </div>
                  
                  <button onclick='contactSeller("${dress.name}", "${dress.seller}")' 
                          class="w-full bg-pink-600 text-white font-medium py-2 px-4 rounded-lg hover:bg-pink-700 transition-colors">
                    Contact Seller
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;

            document.body.appendChild(modal);
            document.body.style.overflow = 'hidden';

            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.remove();
                    document.body.style.overflow = 'auto';
                }
            });
        }

        function contactSeller(dressName, sellerName) {
            const message = `Hi ${sellerName}, I'm interested in your "${dressName}" listing. Is it still available?`;
            const whatsappUrl = `https://wa.me/1234567890?text=${encodeURIComponent(message)}`;
            window.open(whatsappUrl, '_blank');
        }

        // ====== GLOBAL FUNCTIONS (for HTML onclick handlers) ======
        function toggleSection(id) {
            FilterUI.toggleSection(id);
        }

        function updatePriceLabel() {
            SearchFilter.updatePriceLabel();
        }

        function applyFilters() {
            SearchFilter.applyFilters();
        }

        function resetFilters() {
            SearchFilter.resetFilters();
        }

        function filterDresses() {
            SearchFilter.filterDresses();
        }

        function updateSuggestions() {
            SearchFilter.filterDresses();
        }

        // ====== APPLICATION INITIALIZATION ======
        document.addEventListener("DOMContentLoaded", () => {
            FilterUI.initialize();
            DressManager.loadDresses();
            WhatsAppChat.initialize();
        });
    </script>
</body>

</html>